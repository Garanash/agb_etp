#!/bin/bash

# üè¢ –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü - –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è
# –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∏ –¥–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –í–µ—Ä—Å–∏—è: 2.0.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE}üè¢ $1${NC}"
    echo -e "${PURPLE}================================${NC}"
}

print_step() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
detect_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VERSION=$VERSION_ID
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
        exit 1
    fi
    
    print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS $VERSION"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PATH
setup_path() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PATH..."
    export PATH="/usr/bin:/usr/local/bin:/snap/bin:$PATH"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if command -v docker &> /dev/null; then
        print_warning "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        docker --version 2>/dev/null || print_warning "Docker –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker, –Ω–æ –Ω–µ –≤ PATH
    DOCKER_PATHS="/usr/bin/docker /usr/local/bin/docker /snap/bin/docker"
    DOCKER_FOUND=""
    
    for path in $DOCKER_PATHS; do
        if [ -f "$path" ]; then
            DOCKER_FOUND="$path"
            break
        fi
    done
    
    if [ -n "$DOCKER_FOUND" ]; then
        print_warning "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –≤ PATH. –î–æ–±–∞–≤–ª—è—é –≤ PATH..."
        export PATH="$(dirname $DOCKER_FOUND):$PATH"
        if command -v docker &> /dev/null; then
            print_success "Docker –Ω–∞–π–¥–µ–Ω –≤ PATH"
            docker --version 2>/dev/null || print_warning "Docker –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            return
        fi
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    case $OS in
        "Ubuntu"|"Debian GNU/Linux")
            print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ Ubuntu/Debian..."
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            apt update -y
            apt install -y curl wget git nano htop unzip software-properties-common apt-transport-https ca-certificates gnupg lsb-release
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
            apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ GPG –∫–ª—é—á–∞ Docker
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
            apt update -y
            apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
            print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            ;;
        "CentOS Linux"|"Red Hat Enterprise Linux")
            print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ CentOS/RHEL..."
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            yum install -y yum-utils device-mapper-persistent-data lvm2
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker
            yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
            yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
            print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            ;;
        *)
            print_warning "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: $OS"
            print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –≤—Ä—É—á–Ω—É—é"
            ;;
    esac
    
    # –ó–∞–ø—É—Å–∫ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ Docker
    systemctl start docker
    systemctl enable docker
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker (–µ—Å–ª–∏ –Ω–µ root)
    if [ "$EUID" -ne 0 ]; then
        sudo usermod -aG docker $USER
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º PATH –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    export PATH="/usr/bin:/usr/local/bin:/snap/bin:$PATH"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç
    sleep 2
    if docker --version >/dev/null 2>&1; then
        print_success "Docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
        docker --version 2>/dev/null || print_warning "Docker –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        print_warning "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PATH"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
install_docker_compose() {
    print_header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if command -v docker-compose &> /dev/null; then
        print_warning "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        docker-compose --version 2>/dev/null || print_warning "Docker Compose –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return
    fi
    
    print_step "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Docker Compose..."
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    ARCH=$(uname -m)
    case $ARCH in
        x86_64) ARCH="x86_64" ;;
        aarch64) ARCH="aarch64" ;;
        armv7l) ARCH="armv7" ;;
        *) print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"; exit 1 ;;
    esac
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
    COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')
    curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-${ARCH}" -o /usr/local/bin/docker-compose
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
    chmod +x /usr/local/bin/docker-compose
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
    ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
    
    print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è $COMPOSE_VERSION)"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    if [ ! -f ".env" ]; then
        print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –∏–∑ –ø—Ä–∏–º–µ—Ä–∞..."
        if [ -f "env.example" ]; then
            cp env.example .env
            print_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"
            print_warning "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!"
        else
            print_error "–§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤—Ä—É—á–Ω—É—é."
            exit 1
        fi
    else
        print_success "–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_message "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p logs/{nginx,backend,frontend}
    mkdir -p backups
    mkdir -p ssl
    mkdir -p nginx/conf.d
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
    chown -R 1000:1000 logs/ 2>/dev/null || true
    chmod -R 755 logs/
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
check_ssl() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    if [ ! -f "ssl/cert.pem" ] || [ ! -f "ssl/key.pem" ]; then
        print_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        print_message "–°–æ–∑–¥–∞—é —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
        
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout ssl/key.pem \
            -out ssl/cert.pem \
            -subj "/C=RU/ST=Moscow/L=Moscow/O=Almazgeobur/OU=IT/CN=localhost"
        
        print_warning "–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã!"
        print_warning "–î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∑–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    else
        print_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down 2>/dev/null || true
    docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
    print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
cleanup() {
    if [ "$1" = "--clean" ]; then
        print_message "–û—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã..."
        docker system prune -f
        docker volume prune -f
        print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    fi
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    local compose_file="docker-compose.yml"
    if [ "$1" = "prod" ]; then
        compose_file="docker-compose.prod.yml"
    fi
    
    print_message "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose -f $compose_file build --no-cache
    print_success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    local compose_file="docker-compose.yml"
    if [ "$1" = "prod" ]; then
        compose_file="docker-compose.prod.yml"
    fi
    
    print_message "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f $compose_file up -d
    
    print_message "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f $compose_file ps
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_health() {
    local compose_file="docker-compose.yml"
    local backend_port="8000"
    local frontend_port="3000"
    
    if [ "$1" = "prod" ]; then
        compose_file="docker-compose.prod.yml"
        backend_port="8000"
        frontend_port="3000"
    fi
    
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    for i in {1..30}; do
        if docker exec agb_etp_postgres pg_isready -U agb_etp >/dev/null 2>&1; then
            print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥"
            return 1
        fi
        sleep 1
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ backend API..."
    for i in {1..30}; do
        if curl -s http://localhost:$backend_port/health >/dev/null 2>&1; then
            print_success "Backend API –≥–æ—Ç–æ–≤"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "Backend API –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥"
            return 1
        fi
        sleep 1
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ frontend..."
    for i in {1..30}; do
        if curl -s http://localhost:$frontend_port >/dev/null 2>&1; then
            print_success "Frontend –≥–æ—Ç–æ–≤"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "Frontend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥"
            return 1
        fi
        sleep 1
    done
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database() {
    print_message "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    docker exec agb_etp_backend python -c "
import sys
sys.path.append('/app')
from database import engine
from models import Base
Base.metadata.create_all(bind=engine)
print('–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã')
" 2>/dev/null || print_warning "–¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    docker exec agb_etp_backend python -c "
import sys
sys.path.append('/app')
from create_test_users import create_test_users
from create_test_tenders import create_test_tenders
from create_test_supplier_proposals import create_test_supplier_proposals
try:
    create_test_users()
    create_test_tenders()
    create_test_supplier_proposals()
    print('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã')
except Exception as e:
    print(f'–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {e}')
" 2>/dev/null || print_warning "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
    
    print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
setup_firewall() {
    print_message "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
    
    # UFW (Ubuntu)
    if command -v ufw &> /dev/null; then
        ufw --force enable
        ufw allow 22/tcp    # SSH
        ufw allow 80/tcp    # HTTP
        ufw allow 443/tcp   # HTTPS
        ufw allow 8000/tcp  # Backend API (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        ufw allow 3000/tcp  # Frontend (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        print_success "UFW –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # iptables (CentOS/RHEL)
    if command -v iptables &> /dev/null; then
        iptables -A INPUT -p tcp --dport 22 -j ACCEPT
        iptables -A INPUT -p tcp --dport 80 -j ACCEPT
        iptables -A INPUT -p tcp --dport 443 -j ACCEPT
        iptables -A INPUT -p tcp --dport 8000 -j ACCEPT
        iptables -A INPUT -p tcp --dport 3000 -j ACCEPT
        iptables -A INPUT -j DROP
        print_success "iptables –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    local mode=$1
    echo ""
    echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    
    if [ "$mode" = "prod" ]; then
    echo "üì± –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é (Production):"
    echo "   HTTP: http://$(hostname -I | awk '{print $1}')"
    echo "   HTTPS: https://$(hostname -I | awk '{print $1}')"
    echo "   API: http://$(hostname -I | awk '{print $1}')/api/"
    echo "   API Docs (Swagger): http://$(hostname -I | awk '{print $1}')/api/ololo/docs"
    echo "   API Docs (ReDoc): http://$(hostname -I | awk '{print $1}')/api/ololo/redoc"
    else
        echo "üì± –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é (Development):"
        echo "   Frontend: http://localhost:3000"
        echo "   Backend API: http://localhost:8000"
        echo "   API Docs (Swagger): http://localhost:8000/docs"
        echo "   API Docs (ReDoc): http://localhost:8000/redoc"
    fi
    
    echo ""
    echo "üë§ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
    echo "   –ê–¥–º–∏–Ω: admin@almazgeobur.ru / password"
    echo "   –ü–æ—Å—Ç–∞–≤—â–∏–∫: newuser@example.com / password123"
    echo ""
    echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    if [ "$mode" = "prod" ]; then
        echo "   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: docker-compose -f docker-compose.prod.yml down"
        echo "   –õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f"
        echo "   –°—Ç–∞—Ç—É—Å: docker-compose -f docker-compose.prod.yml ps"
    else
        echo "   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: docker-compose down"
        echo "   –õ–æ–≥–∏: docker-compose logs -f"
        echo "   –°—Ç–∞—Ç—É—Å: docker-compose ps"
    fi
    echo ""
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
show_help() {
    echo "üè¢ –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü - –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  ./deploy.sh [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  --dev        –î–µ–ø–ª–æ–π –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  --prod       –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ"
    echo "  --setup      –¢–æ–ª—å–∫–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker)"
    echo "  --clean      –û—á–∏—Å—Ç–∏—Ç—å Docker —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º"
    echo "  --stop       –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  --restart    –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo "  --logs       –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  --status     –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  --help       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  ./deploy.sh              # –î–µ–ø–ª–æ–π –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo "  ./deploy.sh --prod       # –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ"
    echo "  ./deploy.sh --setup      # –¢–æ–ª—å–∫–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  ./deploy.sh --clean      # –î–µ–ø–ª–æ–π —Å –æ—á–∏—Å—Ç–∫–æ–π"
    echo "  ./deploy.sh --stop       # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo "  ./deploy.sh --restart    # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    echo ""
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
MODE="dev"
CLEAN=""

case "${1:-}" in
    --help)
        show_help
        exit 0
        ;;
    --prod)
        MODE="prod"
        ;;
    --dev)
        MODE="dev"
        ;;
    --setup)
        MODE="setup"
        ;;
    --clean)
        CLEAN="--clean"
        ;;
    --stop)
        print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose down 2>/dev/null || true
        docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
        print_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        exit 0
        ;;
    --restart)
        print_message "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose restart 2>/dev/null || true
        docker-compose -f docker-compose.prod.yml restart 2>/dev/null || true
        print_success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
        exit 0
        ;;
    --logs)
        print_message "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤..."
        if [ -f "docker-compose.prod.yml" ] && docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            docker-compose -f docker-compose.prod.yml logs -f
        else
            docker-compose logs -f
        fi
        exit 0
        ;;
    --status)
        print_message "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
        if [ -f "docker-compose.prod.yml" ] && docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            docker-compose -f docker-compose.prod.yml ps
        else
            docker-compose ps
        fi
        exit 0
        ;;
    "")
        # –û–±—ã—á–Ω—ã–π –¥–µ–ø–ª–æ–π –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
        show_help
        exit 1
        ;;
esac

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è
main() {
    echo "üè¢ –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü - –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è"
    echo "========================================"
    echo ""
    
    detect_os
    setup_path
    
    if [ "$MODE" = "setup" ]; then
        install_docker
        install_docker_compose
        setup_firewall
        print_success "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        exit 0
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
        install_docker
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_warning "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
        install_docker_compose
    fi
    
    check_env
    create_directories
    check_ssl
    stop_containers
    cleanup "$CLEAN"
    build_images "$MODE"
    start_services "$MODE"
    check_health "$MODE"
    init_database
    setup_firewall
    show_access_info "$MODE"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
main "$@"