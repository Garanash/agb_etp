#!/bin/bash

# üè¢ –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE}üè¢ $1${NC}"
    echo -e "${PURPLE}================================${NC}"
}

print_step() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
        print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo ./setup-server.sh"
        exit 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PATH
setup_path() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PATH..."
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è Docker
    export PATH="/usr/bin:/usr/local/bin:/snap/bin:$PATH"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Docker –≤ —Å–∏—Å—Ç–µ–º–µ
    if [ -f /usr/bin/docker ] || [ -f /usr/local/bin/docker ] || [ -f /snap/bin/docker ]; then
        print_info "Docker –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
    else
        print_info "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
detect_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VERSION=$VERSION_ID
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
        exit 1
    fi
    
    print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS $VERSION"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
update_system() {
    print_header "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    
    case $OS in
        "Ubuntu"|"Debian GNU/Linux")
            print_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ Ubuntu/Debian..."
            apt update -y
            apt upgrade -y
            apt install -y curl wget git nano htop unzip software-properties-common apt-transport-https ca-certificates gnupg lsb-release
            print_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            ;;
        "CentOS Linux"|"Red Hat Enterprise Linux")
            print_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ CentOS/RHEL..."
            yum update -y
            yum install -y curl wget git nano htop unzip yum-utils device-mapper-persistent-data lvm2
            print_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            ;;
        *)
            print_warning "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: $OS"
            print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –≤—Ä—É—á–Ω—É—é"
            ;;
    esac
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    print_header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if command -v docker &> /dev/null; then
        print_warning "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        docker --version
        return
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker, –Ω–æ –Ω–µ –≤ PATH
    DOCKER_PATHS="/usr/bin/docker /usr/local/bin/docker /snap/bin/docker"
    DOCKER_FOUND=""
    
    for path in $DOCKER_PATHS; do
        if [ -f "$path" ]; then
            DOCKER_FOUND="$path"
            break
        fi
    done
    
    if [ -n "$DOCKER_FOUND" ]; then
        print_warning "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –≤ PATH. –î–æ–±–∞–≤–ª—è—é –≤ PATH..."
        export PATH="$(dirname $DOCKER_FOUND):$PATH"
        if command -v docker &> /dev/null; then
            print_success "Docker –Ω–∞–π–¥–µ–Ω –≤ PATH"
            docker --version
            return
        fi
    fi
    
    case $OS in
        "Ubuntu"|"Debian GNU/Linux")
            print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ Ubuntu/Debian..."
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
            apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ GPG –∫–ª—é—á–∞ Docker
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
            apt update -y
            apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
            print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            ;;
        "CentOS Linux"|"Red Hat Enterprise Linux")
            print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ CentOS/RHEL..."
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            yum install -y yum-utils device-mapper-persistent-data lvm2
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker
            yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
            yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            
            print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            ;;
    esac
    
    # –ó–∞–ø—É—Å–∫ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ Docker
    systemctl start docker
    systemctl enable docker
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
    usermod -aG docker $SUDO_USER
    
    # –û–±–Ω–æ–≤–ª—è–µ–º PATH –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    export PATH="/usr/bin:/usr/local/bin:/snap/bin:$PATH"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç
    sleep 2
    if docker --version >/dev/null 2>&1; then
        print_success "Docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
        docker --version
    else
        print_warning "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏"
        print_info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: source ~/.bashrc –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
install_docker_compose() {
    print_header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if command -v docker-compose &> /dev/null; then
        print_warning "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        docker-compose --version
        return
    fi
    
    print_step "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Docker Compose..."
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    ARCH=$(uname -m)
    case $ARCH in
        x86_64) ARCH="x86_64" ;;
        aarch64) ARCH="aarch64" ;;
        armv7l) ARCH="armv7" ;;
        *) print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"; exit 1 ;;
    esac
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
    COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')
    curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-${ARCH}" -o /usr/local/bin/docker-compose
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
    chmod +x /usr/local/bin/docker-compose
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
    ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
    
    print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è $COMPOSE_VERSION)"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
setup_firewall() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"
    
    # UFW (Ubuntu/Debian)
    if command -v ufw &> /dev/null; then
        print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UFW..."
        ufw --force enable
        ufw allow 22/tcp    # SSH
        ufw allow 80/tcp    # HTTP
        ufw allow 443/tcp   # HTTPS
        ufw allow 8000/tcp  # Backend API (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        ufw allow 3000/tcp  # Frontend (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        print_success "UFW –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # firewalld (CentOS/RHEL)
    if command -v firewall-cmd &> /dev/null; then
        print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewalld..."
        systemctl start firewalld
        systemctl enable firewalld
        firewall-cmd --permanent --add-service=ssh
        firewall-cmd --permanent --add-service=http
        firewall-cmd --permanent --add-service=https
        firewall-cmd --permanent --add-port=8000/tcp
        firewall-cmd --permanent --add-port=3000/tcp
        firewall-cmd --reload
        print_success "firewalld –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # iptables (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
    if command -v iptables &> /dev/null; then
        print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ iptables..."
        iptables -A INPUT -p tcp --dport 22 -j ACCEPT
        iptables -A INPUT -p tcp --dport 80 -j ACCEPT
        iptables -A INPUT -p tcp --dport 443 -j ACCEPT
        iptables -A INPUT -p tcp --dport 8000 -j ACCEPT
        iptables -A INPUT -p tcp --dport 3000 -j ACCEPT
        iptables -A INPUT -j DROP
        print_success "iptables –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
install_tools() {
    print_header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
    
    case $OS in
        "Ubuntu"|"Debian GNU/Linux")
            print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ Ubuntu/Debian..."
            apt install -y \
                htop \
                tree \
                vim \
                nano \
                curl \
                wget \
                git \
                unzip \
                zip \
                jq \
                net-tools \
                dnsutils \
                telnet \
                nc \
                tcpdump \
                strace \
                lsof \
                ps aux
            ;;
        "CentOS Linux"|"Red Hat Enterprise Linux")
            print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ CentOS/RHEL..."
            yum install -y \
                htop \
                tree \
                vim \
                nano \
                curl \
                wget \
                git \
                unzip \
                zip \
                jq \
                net-tools \
                bind-utils \
                telnet \
                nc \
                tcpdump \
                strace \
                lsof \
                procps-ng
            ;;
    esac
    
    print_success "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
setup_monitoring() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
    cat > /usr/local/bin/system-monitor.sh << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã

echo "=== –°–ò–°–¢–ï–ú–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì $(date) ==="
echo

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
echo "CPU:"
top -bn1 | grep "Cpu(s)" | awk '{print "  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: " $2}'
echo

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
echo "–ü–ê–ú–Ø–¢–¨:"
free -h | grep -E "Mem|Swap"
echo

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
echo "–î–ò–°–ö:"
df -h | grep -E "/$|/var|/tmp"
echo

# –°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
echo "–°–ï–¢–¨:"
ss -tuln | grep -E ":80|:443|:8000|:3000|:5432"
echo

# Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "DOCKER:"
if command -v docker &> /dev/null; then
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
else
    echo "  Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi
echo

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã
echo "–ó–ê–ì–†–£–ó–ö–ê:"
uptime
echo
EOF
    
    chmod +x /usr/local/bin/system-monitor.sh
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    cat > /usr/local/bin/app-monitor.sh << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

cd /opt/agb_etp 2>/dev/null || cd /home/$USER/agb_etp 2>/dev/null || {
    echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    exit 1
}

echo "=== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø $(date) ==="
echo

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "–°–¢–ê–¢–£–° –ö–û–ù–¢–ï–ô–ù–ï–†–û–í:"
if [ -f "docker-compose.yml" ]; then
    docker-compose ps
elif [ -f "docker-compose.prod.yml" ]; then
    docker-compose -f docker-compose.prod.yml ps
else
    echo "  –§–∞–π–ª docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
echo

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
echo "–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø:"
if curl -s http://localhost:8000/health >/dev/null 2>&1; then
    echo "  ‚úÖ Backend API: OK"
else
    echo "  ‚ùå Backend API: –û–®–ò–ë–ö–ê"
fi

if curl -s http://localhost:3000 >/dev/null 2>&1; then
    echo "  ‚úÖ Frontend: OK"
else
    echo "  ‚ùå Frontend: –û–®–ò–ë–ö–ê"
fi

if curl -s http://localhost/health >/dev/null 2>&1; then
    echo "  ‚úÖ Nginx: OK"
else
    echo "  ‚ùå Nginx: –û–®–ò–ë–ö–ê"
fi
echo

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ Docker
echo "–†–ï–°–£–†–°–´ DOCKER:"
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
echo

# –õ–æ–≥–∏ –æ—à–∏–±–æ–∫
echo "–ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò:"
if [ -d "logs" ]; then
    find logs/ -name "*.log" -type f -exec tail -5 {} \; 2>/dev/null | grep -i error | tail -10
else
    echo "  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi
EOF
    
    chmod +x /usr/local/bin/app-monitor.sh
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    (crontab -l 2>/dev/null; echo "# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç") | crontab -
    (crontab -l 2>/dev/null; echo "*/5 * * * * /usr/local/bin/system-monitor.sh >> /var/log/system-monitor.log 2>&1") | crontab -
    (crontab -l 2>/dev/null; echo "# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç") | crontab -
    (crontab -l 2>/dev/null; echo "*/10 * * * * /usr/local/bin/app-monitor.sh >> /var/log/app-monitor.log 2>&1") | crontab -
    
    print_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p /var/log/agb_etp/{nginx,backend,frontend,postgres}
    chown -R $SUDO_USER:$SUDO_USER /var/log/agb_etp/
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ logrotate
    cat > /etc/logrotate.d/agb_etp << 'EOF'
/var/log/agb_etp/*/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 root root
    postrotate
        docker-compose -f /opt/agb_etp/docker-compose.prod.yml restart nginx 2>/dev/null || true
    endscript
}

/var/log/system-monitor.log
/var/log/app-monitor.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    create 644 root root
}
EOF
    
    print_success "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
setup_backup() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    cat > /usr/local/bin/agb-backup.sh << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

BACKUP_DIR="/opt/backups/agb_etp"
DATE=$(date +%Y%m%d_%H%M%S)
PROJECT_DIR="/opt/agb_etp"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
mkdir -p $BACKUP_DIR

echo "=== –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï $(date) ==="

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
if docker ps | grep -q agb_etp_postgres; then
    docker exec agb_etp_postgres_prod pg_dump -U agb_etp agb_etp > $BACKUP_DIR/database_$DATE.sql
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $BACKUP_DIR/database_$DATE.sql"
else
    echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

# –ë—ç–∫–∞–ø –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
echo "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ñ–∞–π–ª–æ–≤..."
if [ -d "$PROJECT_DIR/backend/uploads" ]; then
    tar -czf $BACKUP_DIR/uploads_$DATE.tar.gz -C $PROJECT_DIR backend/uploads
    echo "‚úÖ –§–∞–π–ª—ã: $BACKUP_DIR/uploads_$DATE.tar.gz"
else
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi

# –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
tar -czf $BACKUP_DIR/config_$DATE.tar.gz -C $PROJECT_DIR .env docker-compose*.yml nginx/
echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $BACKUP_DIR/config_$DATE.tar.gz"

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
echo "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤..."
find $BACKUP_DIR -name "*.sql" -mtime +30 -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +30 -delete

echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
EOF
    
    chmod +x /usr/local/bin/agb-backup.sh
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    (crontab -l 2>/dev/null; echo "# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00") | crontab -
    (crontab -l 2>/dev/null; echo "0 2 * * * /usr/local/bin/agb-backup.sh >> /var/log/backup.log 2>&1") | crontab -
    
    print_success "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
create_app_user() {
    print_header "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if id "agb_user" &>/dev/null; then
        print_warning "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å agb_user —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_step "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è agb_user..."
        useradd -m -s /bin/bash agb_user
        usermod -aG docker agb_user
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å agb_user —Å–æ–∑–¥–∞–Ω"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞
create_directories() {
    print_header "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    mkdir -p /opt/agb_etp
    chown agb_user:agb_user /opt/agb_etp
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p /opt/agb_etp/logs/{nginx,backend,frontend,postgres}
    chown -R agb_user:agb_user /opt/agb_etp/logs
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    mkdir -p /opt/backups/agb_etp
    chown -R agb_user:agb_user /opt/backups/agb_etp
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è SSL
    mkdir -p /opt/agb_etp/ssl
    chown agb_user:agb_user /opt/agb_etp/ssl
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
setup_ssh() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ SSH –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è agb_user
    if [ ! -f /home/agb_user/.ssh/id_rsa ]; then
        print_step "–°–æ–∑–¥–∞–Ω–∏–µ SSH –∫–ª—é—á–µ–π –¥–ª—è agb_user..."
        sudo -u agb_user ssh-keygen -t rsa -b 4096 -f /home/agb_user/.ssh/id_rsa -N ""
        print_success "SSH –∫–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã"
    else
        print_warning "SSH –∫–ª—é—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cat > /etc/ssh/sshd_config.d/agb_etp.conf << 'EOF'
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSH –¥–ª—è –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü
PermitRootLogin no
PasswordAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
ClientAliveInterval 300
ClientAliveCountMax 2
MaxAuthTries 3
EOF
    
    systemctl reload sshd
    print_success "SSH –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
final_check() {
    print_header "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
    
    echo "=== –ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–ö–ò ==="
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    export PATH="/usr/bin:/usr/local/bin:/snap/bin:$PATH"
    if command -v docker &> /dev/null; then
        print_success "Docker: $(docker --version)"
    elif [ -f /usr/bin/docker ] || [ -f /usr/local/bin/docker ] || [ -f /snap/bin/docker ]; then
        print_warning "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –≤ PATH"
        print_info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: export PATH=\"/usr/bin:/usr/local/bin:/snap/bin:\$PATH\""
    else
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if command -v docker-compose &> /dev/null; then
        print_success "Docker Compose: $(docker-compose --version)"
    else
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    if systemctl is-active --quiet docker; then
        print_success "Docker —Å–µ—Ä–≤–∏—Å: –∑–∞–ø—É—â–µ–Ω"
    else
        print_error "Docker —Å–µ—Ä–≤–∏—Å: –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if id "agb_user" &>/dev/null; then
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å agb_user: —Å–æ–∑–¥–∞–Ω"
    else
        print_error "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å agb_user: –Ω–µ —Å–æ–∑–¥–∞–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if [ -d "/opt/agb_etp" ]; then
        print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: —Å–æ–∑–¥–∞–Ω–∞"
    else
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
    fi
    
    echo
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
show_next_steps() {
    print_header "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"
    
    echo "üéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo
    echo "üìã –ß—Ç–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:"
    echo "  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞"
    echo "  ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Docker –∏ Docker Compose"
    echo "  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω —Ñ–∞–π—Ä–≤–æ–ª"
    echo "  ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
    echo "  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    echo "  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å agb_user"
    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    echo
    echo "üöÄ –î–ª—è –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
    echo "  1. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è agb_user:"
    echo "     sudo su - agb_user"
    echo
    echo "  2. –°–∫–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:"
    echo "     cd /opt/agb_etp"
    echo "     git clone <repository-url> ."
    echo
    echo "  3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:"
    echo "     cp env.example .env"
    echo "     nano .env"
    echo
    echo "  4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
    echo "     ./deploy-prod.sh"
    echo
    echo "üîß –ï—Å–ª–∏ Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH:"
    echo "     ./fix-docker-path.sh"
    echo
    echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  system-monitor.sh    - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"
    echo "  app-monitor.sh       - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "  agb-backup.sh        - —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo
    echo "üìä –õ–æ–≥–∏:"
    echo "  /var/log/system-monitor.log"
    echo "  /var/log/app-monitor.log"
    echo "  /var/log/backup.log"
    echo
    echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
    echo "  /opt/agb_etp         - –ø—Ä–æ–µ–∫—Ç"
    echo "  /opt/backups/agb_etp - –±—ç–∫–∞–ø—ã"
    echo "  /var/log/agb_etp     - –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header "–ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    echo "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
    echo
    
    check_root
    setup_path
    detect_os
    update_system
    install_docker
    install_docker_compose
    setup_firewall
    install_tools
    setup_monitoring
    setup_logging
    setup_backup
    create_app_user
    create_directories
    setup_ssh
    final_check
    show_next_steps
}

# –ó–∞–ø—É—Å–∫
main "$@"
