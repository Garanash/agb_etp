#!/bin/bash

# ะกะบัะธะฟั ะดะปั ะฟัะธะฝัะดะธัะตะปัะฝะพะน ะฟะตัะตัะฑะพัะบะธ ััะพะฝัะตะฝะดะฐ
echo "๐ง ะัะธะฝัะดะธัะตะปัะฝะฐั ะฟะตัะตัะฑะพัะบะฐ ััะพะฝัะตะฝะดะฐ..."

# ะััะฐะฝะฐะฒะปะธะฒะฐะตะผ ะฒัะต ะบะพะฝัะตะนะฝะตัั
echo "โน๏ธ  ะััะฐะฝะพะฒะบะฐ ะฒัะตั ะบะพะฝัะตะนะฝะตัะพะฒ..."
docker stop agb_etp_frontend agb_etp_backend agb_etp_postgres 2>/dev/null || true
docker rm agb_etp_frontend agb_etp_backend agb_etp_postgres 2>/dev/null || true

# ะฃะดะฐะปัะตะผ ะฒัะต ะพะฑัะฐะทั ััะพะฝัะตะฝะดะฐ
echo "๐๏ธ  ะฃะดะฐะปะตะฝะธะต ะฒัะตั ะพะฑัะฐะทะพะฒ ััะพะฝัะตะฝะดะฐ..."
docker rmi agb_etp-frontend 2>/dev/null || true
docker images | grep frontend | awk '{print $3}' | xargs docker rmi 2>/dev/null || true

# ะัะธัะฐะตะผ ะบัั Docker
echo "๐งน ะัะธััะบะฐ ะบััะฐ Docker..."
docker system prune -f

# ะกะพะทะดะฐะตะผ .env ัะฐะนะป
echo "๐ ะกะพะทะดะฐะฝะธะต .env ัะฐะนะปะฐ..."
cat > .env << 'EOF'
POSTGRES_USER=agb_etp
POSTGRES_PASSWORD=agb_secure_password_2024
POSTGRES_DB=agb_etp
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
DATABASE_URL=postgresql://agb_etp:agb_secure_password_2024@postgres:5432/agb_etp
SECRET_KEY=agb_very_secure_secret_key_2024_change_in_production
DEBUG=False
CORS_ORIGINS=["http://localhost:3000", "http://81.200.158.192:3000", "http://81.200.158.192:8000"]
ALLOWED_FILE_TYPES=pdf,doc,docx,xls,xlsx,jpg,jpeg,png
MAX_FILE_SIZE=10485760
NEXT_PUBLIC_API_URL=http://81.200.158.192:8000
LOG_LEVEL=INFO
EOF

# ะะตัะตัะพะดะธะผ ะฒ ะฟะฐะฟะบั ััะพะฝัะตะฝะดะฐ
cd frontend

# ะัะธัะฐะตะผ ะบัั Next.js
echo "๐งน ะัะธััะบะฐ ะบััะฐ Next.js..."
rm -rf .next
rm -rf node_modules/.cache

# ะะตัะตัะพะฑะธัะฐะตะผ ััะพะฝัะตะฝะด ั ะฟัะฐะฒะธะปัะฝัะผ API URL
echo "๐จ ะะตัะตัะฑะพัะบะฐ ััะพะฝัะตะฝะดะฐ ั API URL: http://81.200.158.192:8000"
docker build -t agb_etp-frontend \
  --build-arg NEXT_PUBLIC_API_URL="http://81.200.158.192:8000" \
  --no-cache \
  --progress=plain .

# ะัะพะฒะตััะตะผ, ััะพ ะพะฑัะฐะท ัะพะทะดะฐะปัั
if docker images | grep -q agb_etp-frontend; then
    echo "โ ะะฑัะฐะท ััะพะฝัะตะฝะดะฐ ัะพะทะดะฐะฝ ััะฟะตัะฝะพ"
else
    echo "โ ะัะธะฑะบะฐ ัะพะทะดะฐะฝะธั ะพะฑัะฐะทะฐ ััะพะฝัะตะฝะดะฐ"
    exit 1
fi

cd ..

# ะะฐะฟััะบะฐะตะผ PostgreSQL
echo "๐ ะะฐะฟััะบ PostgreSQL..."
docker run -d --name agb_etp_postgres \
  -e POSTGRES_USER=agb_etp \
  -e POSTGRES_PASSWORD=agb_secure_password_2024 \
  -e POSTGRES_DB=agb_etp \
  -p 5432:5432 \
  -v postgres_data:/var/lib/postgresql/data \
  postgres:14-alpine

# ะะดะตะผ ะทะฐะฟััะบะฐ PostgreSQL
echo "โณ ะะถะธะดะฐะฝะธะต ะทะฐะฟััะบะฐ PostgreSQL..."
sleep 15

# ะะฐะฟััะบะฐะตะผ Backend
echo "๐ ะะฐะฟััะบ Backend..."
docker run -d --name agb_etp_backend \
  --link agb_etp_postgres:postgres \
  -e DATABASE_URL=postgresql://agb_etp:agb_secure_password_2024@postgres:5432/agb_etp \
  -e POSTGRES_USER=agb_etp \
  -e POSTGRES_PASSWORD=agb_secure_password_2024 \
  -e POSTGRES_DB=agb_etp \
  -e POSTGRES_HOST=postgres \
  -e POSTGRES_PORT=5432 \
  -e SECRET_KEY=agb_very_secure_secret_key_2024_change_in_production \
  -e DEBUG=False \
  -e CORS_ORIGINS='["http://localhost:3000", "http://81.200.158.192:3000", "http://81.200.158.192:8000"]' \
  -e ALLOWED_FILE_TYPES=pdf,doc,docx,xls,xlsx,jpg,jpeg,png \
  -e MAX_FILE_SIZE=10485760 \
  -e LOG_LEVEL=INFO \
  -p 8000:8000 \
  -v $(pwd)/uploads:/app/uploads \
  agb_etp-backend

# ะะดะตะผ ะทะฐะฟััะบะฐ Backend
echo "โณ ะะถะธะดะฐะฝะธะต ะทะฐะฟััะบะฐ Backend..."
sleep 20

# ะัะพะฒะตััะตะผ, ััะพ Backend ัะฐะฑะพัะฐะตั
if curl -s http://localhost:8000/health > /dev/null; then
    echo "โ Backend ะทะฐะฟััะตะฝ ััะฟะตัะฝะพ"
else
    echo "โ Backend ะฝะต ะทะฐะฟัััะธะปัั"
    echo "ะะพะณะธ Backend:"
    docker logs agb_etp_backend
fi

# ะะฐะฟััะบะฐะตะผ Frontend
echo "๐ ะะฐะฟััะบ Frontend..."
docker run -d --name agb_etp_frontend \
  --link agb_etp_backend:backend \
  -e NODE_ENV=production \
  -e NEXT_PUBLIC_API_URL=http://81.200.158.192:8000 \
  -p 3000:3000 \
  agb_etp-frontend

# ะะดะตะผ ะทะฐะฟััะบะฐ Frontend
echo "โณ ะะถะธะดะฐะฝะธะต ะทะฐะฟััะบะฐ Frontend..."
sleep 15

# ะัะพะฒะตััะตะผ ััะฐััั
echo "๐ ะัะพะฒะตัะบะฐ ััะฐัััะฐ ะบะพะฝัะตะนะฝะตัะพะฒ:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# ะัะพะฒะตััะตะผ ะดะพัััะฟะฝะพััั
echo ""
echo "๐ ะัะพะฒะตัะบะฐ ะดะพัััะฟะฝะพััะธ:"
if curl -s http://localhost:8000/health > /dev/null; then
    echo "โ Backend API ะดะพัััะฟะตะฝ"
else
    echo "โ Backend API ะฝะตะดะพัััะฟะตะฝ"
fi

if curl -s http://localhost:3000/ > /dev/null; then
    echo "โ Frontend ะดะพัััะฟะตะฝ"
else
    echo "โ Frontend ะฝะตะดะพัััะฟะตะฝ"
fi

# ะัะพะฒะตััะตะผ, ััะพ ััะพะฝัะตะฝะด ะธัะฟะพะปัะทัะตั ะฟัะฐะฒะธะปัะฝัะน API URL
echo ""
echo "๐ ะัะพะฒะตัะบะฐ API URL ะฒ ััะพะฝัะตะฝะดะต:"
if docker exec agb_etp_frontend printenv | grep NEXT_PUBLIC_API_URL; then
    echo "โ NEXT_PUBLIC_API_URL ะฝะฐัััะพะตะฝ ะฟัะฐะฒะธะปัะฝะพ"
else
    echo "โ NEXT_PUBLIC_API_URL ะฝะต ะฝะฐัััะพะตะฝ"
fi

# ะขะตััะธััะตะผ API ะทะฐะฟัะพั
echo ""
echo "๐ ะขะตััะธัะพะฒะฐะฝะธะต API ะทะฐะฟัะพัะฐ:"
if curl -s -H "Origin: http://81.200.158.192:3000" -H "Content-Type: application/json" -X POST -d '{"email":"admin@almazgeobur.ru","password":"admin123"}' http://localhost:8000/api/v1/auth/login > /dev/null; then
    echo "โ API ะทะฐะฟัะพั ัะฐะฑะพัะฐะตั"
else
    echo "โ API ะทะฐะฟัะพั ะฝะต ัะฐะฑะพัะฐะตั"
fi

echo ""
echo "๐ ะะตัะตัะฑะพัะบะฐ ะทะฐะฒะตััะตะฝะฐ!"
echo "๐ฑ Frontend ะดะพัััะฟะตะฝ ะฟะพ ะฐะดัะตัั: http://81.200.158.192:3000"
echo "๐ Backend API ะดะพัััะฟะตะฝ ะฟะพ ะฐะดัะตัั: http://81.200.158.192:8000"
echo "๐ API ะดะพะบัะผะตะฝัะฐัะธั: http://81.200.158.192:8000/docs"
echo ""
echo "๐ ะะปั ะฟัะพะฒะตัะบะธ ะปะพะณะพะฒ ะฒัะฟะพะปะฝะธัะต:"
echo "   docker logs agb_etp_frontend"
echo "   docker logs agb_etp_backend"
