#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ nginx (–æ–±—Ö–æ–¥ Docker rate limit)
echo "üîß –ó–∞–ø—É—Å–∫ –±–µ–∑ nginx –¥–ª—è –æ–±—Ö–æ–¥–∞ Docker rate limit..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down 2>/dev/null || true
docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
docker-compose -f docker-compose.local.yml down 2>/dev/null || true

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
docker rmi agb_etp-frontend 2>/dev/null || true

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å –ø—É—Å—Ç—ã–º API URL
echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API URL..."
cd frontend
docker build -t agb_etp-frontend --build-arg NEXT_PUBLIC_API_URL="http://81.200.158.192:8000" --no-cache .
cd ..

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f ".env" ]; then
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    cat > .env << 'EOF'
POSTGRES_USER=agb_etp
POSTGRES_PASSWORD=agb_secure_password_2024
POSTGRES_DB=agb_etp
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
DATABASE_URL=postgresql://agb_etp:agb_secure_password_2024@postgres:5432/agb_etp
SECRET_KEY=agb_very_secure_secret_key_2024_change_in_production
DEBUG=False
CORS_ORIGINS=["http://localhost:3000", "http://81.200.158.192:3000", "http://81.200.158.192:8000"]
ALLOWED_FILE_TYPES=pdf,doc,docx,xls,xlsx,jpg,jpeg,png
MAX_FILE_SIZE=10485760
NEXT_PUBLIC_API_URL=http://81.200.158.192:8000
LOG_LEVEL=INFO
EOF
fi

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π docker-compose –±–µ–∑ nginx
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ docker-compose –±–µ–∑ nginx..."
cat > docker-compose.simple.yml << 'EOF'
services:
  postgres:
    image: postgres:14-alpine
    container_name: agb_etp_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - agb_network

  backend:
    image: agb_etp-backend
    container_name: agb_etp_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ALLOWED_FILE_TYPES=${ALLOWED_FILE_TYPES}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - agb_network
    volumes:
      - ./uploads:/app/uploads
      - ./logs/backend:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    image: agb_etp-frontend
    container_name: agb_etp_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - agb_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:

networks:
  agb_network:
    driver: bridge
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ nginx
echo "üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∑ nginx..."
docker-compose -f docker-compose.simple.yml up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 20

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose -f docker-compose.simple.yml ps

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:"
if curl -s http://localhost:8000/health > /dev/null; then
    echo "‚úÖ Backend API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    echo "‚ùå Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

if curl -s http://localhost:3000/ > /dev/null; then
    echo "‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    echo "‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS:"
if curl -s -H "Origin: http://81.200.158.192:3000" -H "Access-Control-Request-Method: POST" -H "Access-Control-Request-Headers: Content-Type" -X OPTIONS http://localhost:8000/api/v1/auth/login | grep -q "Access-Control-Allow-Origin"; then
    echo "‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
else
    echo "‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
fi

echo ""
echo "üéâ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo "üì± Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://81.200.158.192:3000"
echo "üîå Backend API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://81.200.158.192:8000"
echo "üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://81.200.158.192:8000/docs"
echo ""
echo "üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "   docker-compose -f docker-compose.simple.yml logs -f"
