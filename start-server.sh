#!/bin/bash

# üè¢ –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü - –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
# PostgreSQL —Å–∏—Å—Ç–µ–º–Ω—ã–π, Backend –∏ Frontend –Ω–∞—Ç–∏–≤–Ω–æ

echo "üöÄ –ó–∞–ø—É—Å–∫ –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "backend/main.py" ] || [ ! -f "frontend/package.json" ]; then
    echo "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p logs

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
pkill -f "python3 main.py" 2>/dev/null || true
pkill -f "npm start" 2>/dev/null || true
sleep 2

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
cat > .env << 'EOF'
# üè¢ –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü - Production Environment Variables

# =============================================================================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# =============================================================================
POSTGRES_USER=agb_etp
POSTGRES_PASSWORD=agb_secure_password_2024
POSTGRES_DB=agb_etp
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
DATABASE_URL=postgresql://agb_etp:agb_secure_password_2024@localhost:5432/agb_etp

# =============================================================================
# –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
# =============================================================================
SECRET_KEY=agb_very_secure_secret_key_2024_change_in_production
DEBUG=False

# =============================================================================
# CORS
# =============================================================================
CORS_ORIGINS=["http://localhost", "http://81.200.158.192", "https://81.200.158.192", "http://81.200.158.192:3000"]

# =============================================================================
# –§–ê–ô–õ–´
# =============================================================================
ALLOWED_FILE_TYPES=pdf,doc,docx,xls,xlsx,jpg,jpeg,png
MAX_FILE_SIZE=10485760

# =============================================================================
# FRONTEND
# =============================================================================
NEXT_PUBLIC_API_URL=http://81.200.158.192:8000

# =============================================================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# =============================================================================
LOG_LEVEL=INFO
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π PostgreSQL
echo "üêò –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ PostgreSQL..."
systemctl start postgresql
systemctl enable postgresql

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ PostgreSQL
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL..."
sleep 5

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PostgreSQL –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
if systemctl is-active --quiet postgresql; then
    echo "‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    exit 1
fi

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PostgreSQL
echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."
sudo -u postgres psql -c "CREATE USER agb_etp WITH PASSWORD 'agb_secure_password_2024';" 2>/dev/null || true
sudo -u postgres psql -c "CREATE DATABASE agb_etp OWNER agb_etp;" 2>/dev/null || true
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE agb_etp TO agb_etp;" 2>/dev/null || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..."
if sudo -u postgres psql -d agb_etp -c "SELECT 1;" > /dev/null 2>&1; then
    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º Backend
echo "üöÄ –ó–∞–ø—É—Å–∫ Backend..."
cd backend

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip3 install --break-system-packages -r requirements.txt
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ pip –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã..."
    apt-get update
    apt-get install -y python3-fastapi python3-uvicorn python3-sqlalchemy python3-psycopg2 python3-pydantic python3-passlib python3-bcrypt python3-pandas python3-numpy python3-openpyxl
    pip3 install --break-system-packages python-jose python-multipart pydantic-settings email-validator
    if [ $? -ne 0 ]; then
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Backend"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π..."
python3 -c "
try:
    from fastapi import FastAPI
    from sqlalchemy import create_engine
    from psycopg2 import connect
    print('‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ')
except ImportError as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}')
    exit(1)
"

if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º Backend –≤ —Ñ–æ–Ω–µ
echo "üöÄ –ó–∞–ø—É—Å–∫ Backend –≤ —Ñ–æ–Ω–µ..."
nohup python3 main.py > ../logs/backend.log 2>&1 &
BACKEND_PID=$!
echo "Backend PID: $BACKEND_PID"

cd ..

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Backend
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Backend..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Backend –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Backend..."
if curl -s http://localhost:8000/health > /dev/null; then
    echo "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    cd backend
    python3 init_db.py
    cd ..
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
else
    echo "‚ùå Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    echo "–õ–æ–≥–∏ Backend:"
    cat logs/backend.log
    echo ""
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:"
    ps aux | grep python
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º Frontend
echo "üöÄ –ó–∞–ø—É—Å–∫ Frontend..."

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Frontend
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
./install-frontend.sh
if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Frontend"
    exit 1
fi

cd frontend

# –°–æ–∑–¥–∞–µ–º .env.local –¥–ª—è Next.js
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ .env.local –¥–ª—è Next.js..."
cat > .env.local << 'EOF'
NEXT_PUBLIC_API_URL=http://81.200.158.192:8000
EOF

# –°–æ–±–∏—Ä–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
echo "üî® –°–±–æ—Ä–∫–∞ Frontend..."
npm run build
if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Frontend"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º Frontend
echo "üöÄ –ó–∞–ø—É—Å–∫ Frontend –≤ —Ñ–æ–Ω–µ..."
nohup npm start > ../logs/frontend.log 2>&1 &
FRONTEND_PID=$!
echo "Frontend PID: $FRONTEND_PID"

cd ..

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Frontend
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Frontend..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Frontend –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Frontend..."
if curl -s http://localhost:3000 | grep -q "html"; then
    echo "‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ùå Frontend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    echo "–õ–æ–≥–∏ Frontend:"
    cat logs/frontend.log
    exit 1
fi

echo "üéâ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
echo ""
echo "üì± Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://81.200.158.192:3000"
echo "üîå Backend API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://81.200.158.192:8000"
echo "üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://81.200.158.192:8000/docs"
echo ""
echo "üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "   tail -f logs/frontend.log"
echo "   tail -f logs/backend.log"
echo ""
echo "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./stop.sh"
echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:"
echo "Backend PID: $BACKEND_PID"
echo "Frontend PID: $FRONTEND_PID"
