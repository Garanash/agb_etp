#!/bin/bash

# üè¢ –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü - Production Deploy Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_message() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
        print_message "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo ./deploy-prod.sh"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print_message "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh"
        exit 1
    fi
    
    # Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print_message "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_message "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p logs/{nginx,backend,frontend}
    mkdir -p backups
    mkdir -p ssl
    mkdir -p nginx/conf.d
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
    chown -R 1000:1000 logs/
    chmod -R 755 logs/
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
check_ssl() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    if [ ! -f "ssl/cert.pem" ] || [ ! -f "ssl/key.pem" ]; then
        print_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        print_message "–°–æ–∑–¥–∞—é —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
        
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout ssl/key.pem \
            -out ssl/cert.pem \
            -subj "/C=RU/ST=Moscow/L=Moscow/O=Almazgeobur/OU=IT/CN=localhost"
        
        print_warning "–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã!"
        print_warning "–î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∑–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    else
        print_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_config() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    if [ ! -f ".env" ]; then
        print_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print_message "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars=("POSTGRES_PASSWORD" "SECRET_KEY" "NEXT_PUBLIC_API_URL")
    for var in "${required_vars[@]}"; do
        if ! grep -q "^${var}=" .env || grep -q "^${var}=your_" .env; then
            print_error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ .env"
            print_message "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
            exit 1
        fi
    done
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
    print_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    print_message "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."
    docker-compose -f docker-compose.prod.yml build --no-cache
    print_success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    print_message "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.prod.yml up -d
    
    print_message "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
check_health() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    for i in {1..30}; do
        if docker exec agb_etp_postgres_prod pg_isready -U agb_etp >/dev/null 2>&1; then
            print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å"
            return 1
        fi
        sleep 2
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    for i in {1..30}; do
        if curl -s http://localhost:8000/health >/dev/null 2>&1; then
            print_success "Backend –≥–æ—Ç–æ–≤"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
            return 1
        fi
        sleep 2
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    for i in {1..30}; do
        if curl -s http://localhost:3000 >/dev/null 2>&1; then
            print_success "Frontend –≥–æ—Ç–æ–≤"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "Frontend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
            return 1
        fi
        sleep 2
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx
    for i in {1..30}; do
        if curl -s http://localhost/health >/dev/null 2>&1; then
            print_success "Nginx –≥–æ—Ç–æ–≤"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "Nginx –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
            return 1
        fi
        sleep 2
    done
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database() {
    print_message "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    docker exec agb_etp_backend_prod python -c "
import sys
sys.path.append('/app')
from database import engine
from models import Base
Base.metadata.create_all(bind=engine)
print('–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã')
" 2>/dev/null || print_warning "–¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è)
    docker exec agb_etp_backend_prod python -c "
import sys
sys.path.append('/app')
from create_test_users import create_test_users
from create_test_tenders import create_test_tenders
from create_test_supplier_proposals import create_test_supplier_proposals
try:
    create_test_users()
    create_test_tenders()
    create_test_supplier_proposals()
    print('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã')
except Exception as e:
    print(f'–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {e}')
" 2>/dev/null || print_warning "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
    
    print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
setup_firewall() {
    print_message "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
    
    # UFW (Ubuntu)
    if command -v ufw &> /dev/null; then
        ufw --force enable
        ufw allow 22/tcp    # SSH
        ufw allow 80/tcp    # HTTP
        ufw allow 443/tcp   # HTTPS
        print_success "UFW –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    # iptables (CentOS/RHEL)
    if command -v iptables &> /dev/null; then
        iptables -A INPUT -p tcp --dport 22 -j ACCEPT
        iptables -A INPUT -p tcp --dport 80 -j ACCEPT
        iptables -A INPUT -p tcp --dport 443 -j ACCEPT
        iptables -A INPUT -j DROP
        print_success "iptables –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
setup_monitoring() {
    print_message "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    cat > /usr/local/bin/agb-monitor.sh << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–æ–≤

cd /opt/agb_etp

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
if ! docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
    echo "ALERT: Some containers are down!"
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ $DISK_USAGE -gt 80 ]; then
    echo "ALERT: Disk usage is ${DISK_USAGE}%"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
MEM_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
if [ $MEM_USAGE -gt 90 ]; then
    echo "ALERT: Memory usage is ${MEM_USAGE}%"
fi
EOF
    
    chmod +x /usr/local/bin/agb-monitor.sh
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ crontab
    (crontab -l 2>/dev/null; echo "*/5 * * * * /usr/local/bin/agb-monitor.sh") | crontab -
    
    print_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    echo ""
    echo "üéâ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    echo "üì± –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
    echo "   HTTP: http://$(hostname -I | awk '{print $1}')"
    echo "   HTTPS: https://$(hostname -I | awk '{print $1}')"
    echo "   API: http://$(hostname -I | awk '{print $1}')/api/"
    echo "   API Docs (Swagger): http://$(hostname -I | awk '{print $1}')/docs"
    echo "   API Docs (ReDoc): http://$(hostname -I | awk '{print $1}')/redoc"
    echo ""
    echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: docker-compose -f docker-compose.prod.yml down"
    echo "   –õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f"
    echo "   –°—Ç–∞—Ç—É—Å: docker-compose -f docker-compose.prod.yml ps"
    echo "   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: /usr/local/bin/agb-monitor.sh"
    echo ""
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "   –õ–æ–≥–∏: tail -f logs/*/access.log"
    echo "   –†–µ—Å—É—Ä—Å—ã: docker stats"
    echo "   –î–∏—Å–∫: df -h"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    echo "üè¢ –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä –≠–¢–ü - Production Deploy"
    echo "======================================"
    echo ""
    
    check_root
    check_dependencies
    create_directories
    check_ssl
    check_config
    stop_services
    build_images
    start_services
    check_health
    init_database
    setup_firewall
    setup_monitoring
    show_access_info
}

# –ó–∞–ø—É—Å–∫
main "$@"
