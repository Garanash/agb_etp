#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
"""

from sqlalchemy.orm import Session
from sqlalchemy import func
from database import SessionLocal, engine
from models import (
    User, UserRole, SupplierProfile, LegalForm,
    Tender, TenderStatus, TenderLot, TenderProduct,
    SupplierProposal, ProposalItem
)
from decimal import Decimal
from datetime import datetime, timedelta
import random

def create_test_supplier_proposals():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"""
    db = SessionLocal()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        suppliers = db.query(User).filter(User.role == UserRole.SUPPLIER).all()
        if not suppliers:
            print("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã
        tenders = db.query(Tender).filter(Tender.status == TenderStatus.PUBLISHED).all()
        if not tenders:
            print("‚ùå –ù–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã.")
            return
        
        print(f"üìä –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {len(suppliers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ {len(tenders)} —Ç–µ–Ω–¥–µ—Ä–æ–≤...")
        
        created_proposals = 0
        
        for tender in tenders:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–µ–Ω–¥–µ—Ä–∞
            products = []
            for lot in tender.lots:
                products.extend(lot.products)
            
            if not products:
                continue
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            num_suppliers = random.randint(1, min(3, len(suppliers)))
            selected_suppliers = random.sample(suppliers, num_suppliers)
            
            for supplier in selected_suppliers:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                existing_proposal = db.query(SupplierProposal).filter(
                    SupplierProposal.tender_id == tender.id,
                    SupplierProposal.supplier_id == supplier.id
                ).first()
                
                if existing_proposal:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                proposal = SupplierProposal(
                    tender_id=tender.id,
                    supplier_id=supplier.id,
                    prepayment_percent=Decimal(str(random.choice([0, 10, 20, 30]))),
                    currency=random.choice(['RUB', 'USD', 'EUR']),
                    vat_percent=Decimal(str(random.choice([0, 10, 20]))),
                    general_comment=f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {supplier.full_name}",
                    status=random.choice(['draft', 'submitted', 'accepted', 'rejected'])
                )
                
                db.add(proposal)
                db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                
                # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                for product in products:
                    # –°–ª—É—á–∞–π–Ω–æ —Ä–µ—à–∞–µ–º, –≤–∫–ª—é—á–∞—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    if random.random() < 0.8:  # 80% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                        proposal_item = ProposalItem(
                            proposal_id=proposal.id,
                            product_id=product.id,
                            is_available=random.choice([True, True, True, False]),  # 75% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è
                            is_analog=random.choice([True, False, False, False]),  # 25% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∞
                            price_per_unit=Decimal(str(random.uniform(100, 10000))).quantize(Decimal('0.01')),
                            delivery_days=random.randint(1, 90),
                            comment=random.choice([
                                None,
                                "–¢–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏",
                                "–í–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞ –∞–Ω–∞–ª–æ–≥–∞",
                                "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞",
                                "–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞"
                            ])
                        )
                        
                        db.add(proposal_item)
                
                created_proposals += 1
        
        db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_proposals} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_proposals = db.query(SupplierProposal).count()
        total_items = db.query(ProposalItem).count()
        
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {total_proposals}")
        print(f"   - –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö: {total_items}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = db.query(
            SupplierProposal.status,
            func.count(SupplierProposal.id)
        ).group_by(SupplierProposal.status).all()
        
        print(f"   - –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in status_counts:
            print(f"     * {status}: {count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...")
    create_test_supplier_proposals()
    print("üéâ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()
