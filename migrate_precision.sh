#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π —Å —Ü–µ–Ω–∞–º–∏
"""

import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import sys

def migrate_database():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π —Å —Ü–µ–Ω–∞–º–∏"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_params = {
        'host': 'localhost',
        'port': 5433,
        'database': 'agb_etp',
        'user': 'agb_etp',
        'password': 'agb_secure_password_2024'
    }
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(**db_params)
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π
        migrations = [
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ initial_price –≤ —Ç–∞–±–ª–∏—Ü–µ tenders
            "ALTER TABLE tenders ALTER COLUMN initial_price TYPE NUMERIC(20,2);",
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ initial_price –≤ —Ç–∞–±–ª–∏—Ü–µ tender_lots
            "ALTER TABLE tender_lots ALTER COLUMN initial_price TYPE NUMERIC(20,2);",
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ security_amount –≤ —Ç–∞–±–ª–∏—Ü–µ tender_lots
            "ALTER TABLE tender_lots ALTER COLUMN security_amount TYPE NUMERIC(20,2);",
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ proposed_price –≤ —Ç–∞–±–ª–∏—Ü–µ supplier_proposals
            "ALTER TABLE supplier_proposals ALTER COLUMN proposed_price TYPE NUMERIC(20,2);",
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ price_per_unit –≤ —Ç–∞–±–ª–∏—Ü–µ tender_products
            "ALTER TABLE tender_products ALTER COLUMN price_per_unit TYPE NUMERIC(20,2);"
        ]
        
        print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        
        for i, migration in enumerate(migrations, 1):
            try:
                print(f"  {i}. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
                cursor.execute(migration)
                print(f"  ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {i} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except psycopg2.Error as e:
                if "does not exist" in str(e) or "column" in str(e).lower():
                    print(f"  ‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è {i} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–∫–æ–ª–æ–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {e}")
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ {i}: {e}")
                    raise
        
        print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        cursor.execute("""
            SELECT column_name, data_type, numeric_precision, numeric_scale 
            FROM information_schema.columns 
            WHERE table_name IN ('tenders', 'tender_lots', 'supplier_proposals', 'tender_products')
            AND column_name IN ('initial_price', 'security_amount', 'proposed_price', 'price_per_unit')
            ORDER BY table_name, column_name;
        """)
        
        results = cursor.fetchall()
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        for row in results:
            print(f"  {row[0]} ({row[1]}): precision={row[2]}, scale={row[3]}")
        
        cursor.close()
        conn.close()
        
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except psycopg2.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    success = migrate_database()
    sys.exit(0 if success else 1)
